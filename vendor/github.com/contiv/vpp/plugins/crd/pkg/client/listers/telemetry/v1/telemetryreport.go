// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/contiv/vpp/plugins/crd/pkg/apis/telemetry/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TelemetryReportLister helps list TelemetryReports.
type TelemetryReportLister interface {
	// List lists all TelemetryReports in the indexer.
	List(selector labels.Selector) (ret []*v1.TelemetryReport, err error)
	// TelemetryReports returns an object that can list and get TelemetryReports.
	TelemetryReports(namespace string) TelemetryReportNamespaceLister
	TelemetryReportListerExpansion
}

// telemetryReportLister implements the TelemetryReportLister interface.
type telemetryReportLister struct {
	indexer cache.Indexer
}

// NewTelemetryReportLister returns a new TelemetryReportLister.
func NewTelemetryReportLister(indexer cache.Indexer) TelemetryReportLister {
	return &telemetryReportLister{indexer: indexer}
}

// List lists all TelemetryReports in the indexer.
func (s *telemetryReportLister) List(selector labels.Selector) (ret []*v1.TelemetryReport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TelemetryReport))
	})
	return ret, err
}

// TelemetryReports returns an object that can list and get TelemetryReports.
func (s *telemetryReportLister) TelemetryReports(namespace string) TelemetryReportNamespaceLister {
	return telemetryReportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TelemetryReportNamespaceLister helps list and get TelemetryReports.
type TelemetryReportNamespaceLister interface {
	// List lists all TelemetryReports in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.TelemetryReport, err error)
	// Get retrieves the TelemetryReport from the indexer for a given namespace and name.
	Get(name string) (*v1.TelemetryReport, error)
	TelemetryReportNamespaceListerExpansion
}

// telemetryReportNamespaceLister implements the TelemetryReportNamespaceLister
// interface.
type telemetryReportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TelemetryReports in the indexer for a given namespace.
func (s telemetryReportNamespaceLister) List(selector labels.Selector) (ret []*v1.TelemetryReport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TelemetryReport))
	})
	return ret, err
}

// Get retrieves the TelemetryReport from the indexer for a given namespace and name.
func (s telemetryReportNamespaceLister) Get(name string) (*v1.TelemetryReport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("telemetryreport"), name)
	}
	return obj.(*v1.TelemetryReport), nil
}
